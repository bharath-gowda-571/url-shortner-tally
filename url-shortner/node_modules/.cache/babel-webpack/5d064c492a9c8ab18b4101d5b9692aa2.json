{"ast":null,"code":"import _asyncToGenerator from \"/home/bharath/Desktop/drive2/tally-hackathon/url-shortner/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LogsService {\n  constructor(http) {\n    this.http = http;\n  } // getLocation() {\n  //   var lat;\n  //   var lng;\n  //   if (navigator.geolocation) {\n  //     navigator.geolocation.getCurrentPosition((position: any) => {\n  //       if (position) {\n  //         lat = position.coords.latitude;\n  //         lng = position.coords.longitude;\n  //         console.log(lat);\n  //         console.log(lng);\n  //       }\n  //     },\n  //       (error: any) => console.log(error));\n  //   } else {\n  //     alert(\"Geolocation is not supported by this browser.\");\n  //   }\n  // }\n\n\n  getUserLocation() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var ip = yield _this.http.get(\"http://api.ipify.org/?format=json\").toPromise();\n      console.log(ip);\n\n      var location_data = _this.http.get(\"https://ipapi.co/\" + ip.ip + \"/json/\");\n\n      console.log(location);\n    })();\n  }\n\n}\n\nLogsService.ɵfac = function LogsService_Factory(t) {\n  return new (t || LogsService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nLogsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LogsService,\n  factory: LogsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/bharath/Desktop/drive2/tally-hackathon/url-shortner/src/app/services/logs.service.ts"],"names":["i0","i1","LogsService","constructor","http","getUserLocation","ip","get","toPromise","console","log","location_data","location","ɵfac","LogsService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH,GAHoB,CAIrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACMC,EAAAA,eAAe,GAAG;AAAA;;AAAA;AACpB,UAAIC,EAAE,SAAS,KAAI,CAACF,IAAL,CAAUG,GAAV,CAAc,mCAAd,EAAmDC,SAAnD,EAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ;;AACA,UAAIK,aAAa,GAAG,KAAI,CAACP,IAAL,CAAUG,GAAV,CAAc,sBAAsBD,EAAE,CAACA,EAAzB,GAA8B,QAA5C,CAApB;;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AAJoB;AAKvB;;AA1BoB;;AA4BzBV,WAAW,CAACW,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIb,WAAV,EAAuBF,EAAE,CAACgB,QAAH,CAAYf,EAAE,CAACgB,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACAf,WAAW,CAACgB,KAAZ,GAAoB,aAAclB,EAAE,CAACmB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAElB,WAAT;AAAsBmB,EAAAA,OAAO,EAAEnB,WAAW,CAACW,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LogsService {\n    constructor(http) {\n        this.http = http;\n    }\n    // getLocation() {\n    //   var lat;\n    //   var lng;\n    //   if (navigator.geolocation) {\n    //     navigator.geolocation.getCurrentPosition((position: any) => {\n    //       if (position) {\n    //         lat = position.coords.latitude;\n    //         lng = position.coords.longitude;\n    //         console.log(lat);\n    //         console.log(lng);\n    //       }\n    //     },\n    //       (error: any) => console.log(error));\n    //   } else {\n    //     alert(\"Geolocation is not supported by this browser.\");\n    //   }\n    // }\n    async getUserLocation() {\n        var ip = await this.http.get(\"http://api.ipify.org/?format=json\").toPromise();\n        console.log(ip);\n        var location_data = this.http.get(\"https://ipapi.co/\" + ip.ip + \"/json/\");\n        console.log(location);\n    }\n}\nLogsService.ɵfac = function LogsService_Factory(t) { return new (t || LogsService)(i0.ɵɵinject(i1.HttpClient)); };\nLogsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: LogsService, factory: LogsService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}